{
	// Place your lula-app workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
		"ScreenComponent": {
			"scope": "typescriptreact",
			"prefix": "scr",
			"body": [
				"/* eslint-disable react/prefer-stateless-function */",
				"import React from 'react';",
				"",
				"",
				"type Props = {};",
				"",
				"type State = {};",
				"",
				"export class $1 extends React.Component<Props, State> {",
				"  render() {",
				"    return (",
				"      <View style={styles.container}>",
			  "        <Text>works</Text>",
				"      </View>",
			  "    );",
				"  }",
				"}",
				"",
				"const styles = StyleSheet.create({",
				"  container: {},",
				"});",
				"",
			],
			"description": "Template for Screen (Class Component)",
		},
		"FunctionComponent": {
			"scope": "typescriptreact",
			"prefix": "fcm",
			"body": [
				"import React from 'react';",
				"import { createUseStyles } from 'src/lib/jss';",
				"",
				"type Props = {};",
				"",
				"export const $1: React.FC<Props> = (props) => {",
  			"  const cls = useStyles();",
				"",
  			"  return (",
    		"    <div className={cls.container}>",
      	"      works",
    		"    </div>",
  			"  );",
				"};",
				"",
				"const useStyles = createUseStyles({",
  			"  container: {},",
				"});"
			],
			"description": "Template for Function Component",
		}
}